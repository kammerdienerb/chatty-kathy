GET_STAT	src/thread_shared.h	/^#define GET_STAT() (THREAD_SHARED.status)$/
PRINT_MSG	src/thread_shared.h	/^#define PRINT_MSG()                               /
SET_ERR	src/thread_shared.h	/^#define SET_ERR(stat, ...)                        /
SET_MSG	src/thread_shared.h	/^#define SET_MSG(...)                              /
SET_STAT	src/thread_shared.h	/^#define SET_STAT(stat)                            /
_array_copy	src/array.c	/^void _array_copy(array_t *dst, array_t *src) {$/
_array_delete	src/array.c	/^void _array_delete(array_t *array, int idx) {$/
_array_free	src/array.c	/^void _array_free(array_t *array) {$/
_array_grow_if_needed	src/array.c	/^void _array_grow_if_needed(array_t *array) {$/
_array_grow_if_needed_to	src/array.c	/^void _array_grow_if_needed_to(array_t *array, int /
_array_insert	src/array.c	/^void * _array_insert(array_t *array, int idx, void/
_array_make	src/array.c	/^array_t _array_make(int elem_size) {$/
_array_make_with_cap	src/array.c	/^array_t _array_make_with_cap(int elem_size, int in/
_array_next_elem	src/array.c	/^void * _array_next_elem(array_t *array) {$/
_array_push	src/array.c	/^void * _array_push(array_t *array, void *elem) {$/
_array_push_n	src/array.c	/^void * _array_push_n(array_t *array, void *elems, /
_array_zero_term	src/array.c	/^void _array_zero_term(array_t *array) {$/
add_user	src/server.c	/^static ck_user *add_user(char *id) {$/
array_clear	src/array.h	/^#define array_clear(array) \\$/
array_copy	src/array.h	/^#define array_copy(dst, src) \\$/
array_data	src/array.h	/^#define array_data(array) ((array).data)$/
array_delete	src/array.h	/^#define array_delete(array, idx) \\$/
array_free	src/array.h	/^#define array_free(array) \\$/
array_grow_if_needed	src/array.h	/^#define array_grow_if_needed(array) \\$/
array_insert	src/array.h	/^#define array_insert(array, idx, elem) \\$/
array_item	src/array.h	/^#define array_item(array, idx) \\$/
array_last	src/array.h	/^#define array_last(array) \\$/
array_len	src/array.h	/^#define array_len(array) \\$/
array_make	src/array.h	/^#define array_make(T) \\$/
array_make_with_cap	src/array.h	/^#define array_make_with_cap(T, cap) \\$/
array_next_elem	src/array.h	/^#define array_next_elem(array) \\$/
array_pop	src/array.h	/^#define array_pop(array) \\$/
array_push	src/array.h	/^#define array_push(array, elem) \\$/
array_push_n	src/array.h	/^#define array_push_n(array, elems, n) \\$/
array_rtraverse	src/array.h	/^#define array_rtraverse(array, it)                /
array_t	src/array.h	/^} array_t;$/
array_traverse	src/array.h	/^#define array_traverse(array, it)                 /
array_traverse_from	src/array.h	/^#define array_traverse_from(array, it, starting_id/
array_zero_term	src/array.h	/^#define array_zero_term(array) (_array_zero_term(&/
ck_client	src/client.h	/^} ck_client;$/
ck_common	src/common.h	/^} ck_common;$/
ck_emessage	src/message.h	/^} ck_emessage;$/
ck_fifo	src/common.h	/^} ck_fifo;$/
ck_imessage	src/message.h	/^} ck_imessage;$/
ck_pump_handler_client	src/chatty_kathy.c	/^void ck_pump_handler_client(yed_event *event) {$/
ck_pump_handler_server	src/chatty_kathy.c	/^void ck_pump_handler_server(yed_event *event) {$/
ck_send	src/chatty_kathy.c	/^void ck_send(int n_args, char **args) {$/
ck_server	src/server.h	/^} ck_server;$/
ck_start_client	src/chatty_kathy.c	/^void ck_start_client(int n_args, char **args) {$/
ck_start_server	src/chatty_kathy.c	/^void ck_start_server(int n_args, char **args) {$/
ck_thread_shared	src/thread_shared.h	/^} ck_thread_shared;$/
ck_user	src/server.c	/^} ck_user;$/
client_run_thread	src/chatty_kathy.c	/^static void *client_run_thread(void *arg)   { run_/
client_start_thread	src/chatty_kathy.c	/^static void *client_start_thread(void *arg) { star/
del_user	src/server.c	/^static void del_user(char *id) {$/
empty_inbox	src/chatty_kathy.c	/^static void empty_inbox(void) {$/
empty_outbox	src/client.c	/^static int empty_outbox(void) {$/
fifo_get	src/common.c	/^int fifo_get(ck_fifo *fifo, void *dst) {$/
fifo_make	src/common.h	/^#define fifo_make(T)                              /
fifo_put	src/common.c	/^void fifo_put(ck_fifo *fifo, void *item) {$/
get_backlog	src/common.c	/^int get_backlog(void) {$/
get_in_addr	src/common.c	/^void *get_in_addr(struct sockaddr *sa) {$/
get_or_make_buff	src/chatty_kathy.c	/^static yed_buffer *get_or_make_buff(char *name) {$/
get_port	src/common.c	/^int get_port(void) {$/
get_server	src/common.c	/^int get_server(char *server) {$/
handle_emessage	src/server.c	/^static int handle_emessage(ck_user *user, uint8_t /
handle_emessages	src/client.c	/^static int handle_emessages(void) {$/
identify	src/client.c	/^static int identify(void) {$/
init_common	src/common.c	/^int init_common(ck_common *common) {$/
next_power_of_2	src/array.c	/^static uint64_t next_power_of_2(uint64_t x) {$/
read_message	src/client.c	/^static int read_message(void) {$/
recv_all	src/common.c	/^int recv_all(int fd, void *buff, int n) {$/
run_client	src/client.c	/^int run_client(void) {$/
run_server	src/server.c	/^int run_server(void) {$/
send_all	src/common.c	/^int send_all(int fd, void *buff, int n) {$/
server_connection_thread	src/server.c	/^static void *server_connection_thread(void *arg) {/
server_dispatch_thread	src/server.c	/^static void *server_dispatch_thread(void *arg) {$/
server_handle_user	src/server.c	/^static void server_handle_user(ck_user *user) {$/
server_run_thread	src/chatty_kathy.c	/^static void *server_run_thread(void *arg)   { run_/
server_start_thread	src/chatty_kathy.c	/^static void *server_start_thread(void *arg) { star/
start_client	src/client.c	/^int start_client(void) {$/
start_server	src/server.c	/^int start_server(void) {$/
str_t	src/server.c	/^typedef char *str_t;$/
tree	src/server.c	/^tree(str_t, ck_user) users;$/
yed_plugin_boot	src/chatty_kathy.c	/^int yed_plugin_boot(yed_plugin *self) {$/
